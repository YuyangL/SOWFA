/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default                        steadyState;  // backward;
//  default                        CrankNicolson 1.0;
}

gradSchemes
{
    // Limits the gradient such that when cell values are extrapolated to faces using the calculated gradient, the face values do not fall outside the bounds of values in surrounding cells. A limiting coefficient is specified after the underlying scheme for which 1 guarantees boundedness
    default                        cellMDLimited Gauss linear 0.5;
    grad(U)                        cellMDLimited Gauss linear 1;
    grad(k)                        cellMDLimited Gauss linear 1;
    grad(epsilon)                  cellMDLimited Gauss linear 1;
}

divSchemes
{
    // phi is div(U)
    default                        bounded Gauss linear;
    // Sometmes pure linear differencing, which provides no artificial diffusion, causes instability, so a blend of linear plus a small amount of upwind is used
    div(phi,U)                     bounded Gauss localBlended linear upwind;
    div(phi,T)                     bounded Gauss localBlended linear upwind;
    div(R)                         bounded Gauss linear;
    div(U)                         bounded Gauss linear;
    div((nuEff*dev(grad(U).T())))  bounded Gauss linear;
    div(B)                         bounded Gauss linear;
    div(phi,B)                     bounded Gauss linear;
    // upwind interpolation for better convergence
    div(phi,k)                     bounded Gauss upwind;
    div(phi,epsilon)               bounded Gauss upwind;
}

laplacianSchemes
{
    default                        Gauss linear corrected;
    laplacian(rUA,p)               Gauss linear corrected;
    laplacian((1|A(U)),p)          Gauss linear corrected;
    laplacian(interpolate((1|A(U))),p) Gauss linear corrected;
    laplacian(interpolate((1|A(U))),pd) Gauss linear corrected;
    laplacian(nu,U)                Gauss linear corrected;
    laplacian(nuEff,U)             Gauss linear corrected;
    laplacian(kappaEff,T)          Gauss linear corrected;
    laplacian(DBEff,B)             Gauss linear corrected;
    laplacian(nut,U)               Gauss linear corrected;
}

interpolationSchemes
{
    default                        linear;
}

snGradSchemes
{
    // The surface normal gradients terms usually use the same method as the one chosen for the Laplacian terms.
    default                        corrected;
}

fluxRequired
{
    default                        no;
    p_rgh                            ;
}

schemeBlending
{

    // Table of blending factors vs. cell face size.
    faceSizeBlendingTable
    (
    // area          U        T
        (0.096      0.996  0.980 )
        (0.39       0.996  0.980 )
        (1.563      0.997  0.985 )
        (6.25       0.998  0.990 )
        (25         0.999  0.995 )
        (100        1.000  1.000 )
        (1E6        1.000  1.000 )
    );


    // Height above which blending factor begins to transition
    // from heightBlendingFactor_z1 to heightBlendingFactor_z2.
    heightBlending_z1            800.0;

    // Height above which blending factor is heightBlendingFactor_z2.
    heightBlending_z2            1000.0;


    heightBlendingFactorU_z1     1.0;
    heightBlendingFactorU_z2     0.9;

    heightBlendingFactorT_z1     1.0;
    heightBlendingFactorT_z2     0.9;


    // In calculating height, use wall distance or absolute distance.
    useWallDistZ                 false;
}

// ************************************************************************* //
