/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      changeDictionaryDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "../setUp"


dictionaryReplacement
{

    // Specify
    // - all fvPatchFields with potential non-uniform values
    // - all fvPatchFields originating from meshing
    // - all fvPatchFields originating from mesh-redistribution


    boundary
    {
        north
        {
            type            patch;
        }
        south
        {
            type            patch;
        }
        west
        {
            type            patch;
        }
        east
        {
            type            patch;
        }
    }

    T
    {
        boundaryField
        {
            south
            {
                // For RANS, it should read
                // contant/boundaryDataRANS/south/0/T and
                // contant/boundaryDataRANS/south/100000/T
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;
                value           uniform $TBottom;
            }
            north
            {
                type            zeroGradient;  // inletOutlet;
                // inletValue      uniform $TBottom;
                value           uniform $TBottom;
            }
            west
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;
                value           uniform $TBottom;
            }
            east
            {
                type            zeroGradient;  // inletOutlet;
                // inletValue      uniform $TBottom;
                value           uniform $TBottom;
            }
        }
    }

    U
    {
        boundaryField
        {
            lower
            {
                type            fixedValue;

                /* Velocity wall function not necessary anymore since it's inferred from nut wall function thus avoid getting 0 U
                type            velocityABLWallFunction;
                print           true;
                U               U;
                */

                value           uniform (0 0 0);
            }
            west
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          (0 0 0);
                mapMethod       planarInterpolation;
                value           uniform (0 0 0);
            }
            east
            {
                type            inletOutlet;
                inletValue      uniform (0 0 0);

                /*
                type            freeStream;
                // For reverse flow, east patch falls back to inflow BC profile
                freeStreamBC
                {
                    type            atmBoundaryLayerInletVelocity;
                    flowDir         (0.8660254037844 0.5 0);
                    zDir            (0 0 1);
                    Uref            $U0Mag;
                    Zref            $windHeight;
                    z0              uniform $z0;
                    zGround         uniform 0.0;
                    Cmu             $Cmu;
                    kappa           $kappa;
                    value           uniform (0 0 0);  // Don't think this is used;
                }
                */

                value           uniform (0 0 0);
            }
            south
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          (0 0 0);
                mapMethod       planarInterpolation;
                value           uniform (0 0 0);
            }
            north
            {
                // For reverse flow, increase velocity to (0 0 0)
                type            inletOutlet;
                inletValue      uniform (0 0 0);

                /*
                type            freeStream;
                // For reverse flow, east patch falls back to inflow BC profile
                freeStreamBC
                {
                    type            atmBoundaryLayerInletVelocity;
                    flowDir         (0.8660254037844 0.5 0);
                    zDir            (0 0 1);
                    Uref            $U0Mag;
                    Zref            $windHeight;
                    z0              uniform $z0;
                    zGround         uniform 0.0;
                    Cmu             $Cmu;
                    kappa           $kappa;
                    value           uniform (0 0 0);  // Don't think this is used;
                }
                */

                value           uniform (0 0 0);
            }
        }
    }

    k
    {
        boundaryField
        {
            lower
            {
                // lower is 0 since R is taken care of by Rwall
                type            fixedValue;  // kqRWallFunction;  // It's simply zeroGradient
                value           uniform 0;
            }
            upper
            {
                type            zeroGradient;
                value           uniform $k0;
            }
            east
            {
                // Since U has inletValue of (0 0 0), k is 0 too
                type            inletOutlet;
                inletValue      uniform 1e-12;

                /*
                type            freeStream;
                freeStreamBC
                {
                    type            atmBoundaryLayerInletK;
                    flowDir         (0.8660254037844 0.5 0);
                    zDir            (0 0 1);
                    Uref            $U0Mag;
                    Zref            $windHeight;
                    z0              uniform $z0;
                    zGround         uniform 0.0;
                    Cmu             $Cmu;
                    kappa           $kappa;
                    value           uniform $k0;
                }
                */

                value           uniform $k0;
            }
            west
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;

                /*
                type            atmBoundaryLayerInletK;
                flowDir         (0.8660254037844 0.5 0);
                zDir            (0 0 1);
                Uref            $U0Mag;
                Zref            $windHeight;
                z0              uniform $z0;
                zGround         uniform 0.0;
                Cmu             $Cmu;
                kappa           $kappa;
                */

                value           uniform $k0;
            }
            south
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;

                /*
                type            atmBoundaryLayerInletK;
                flowDir         (0.8660254037844 0.5 0);
                zDir            (0 0 1);
                Uref            $U0Mag;
                Zref            $windHeight;
                z0              uniform $z0;
                zGround         uniform 0.0;
                Cmu             $Cmu;
                kappa           $kappa;
                */

                value           uniform $k0;
            }
            north
            {
                type            inletOutlet;
                inletValue      uniform 1e-12;

                /*
                type            freeStream;
                freeStreamBC
                {
                    type            atmBoundaryLayerInletK;
                    flowDir         (0.8660254037844 0.5 0);
                    zDir            (0 0 1);
                    Uref            $U0Mag;
                    Zref            $windHeight;
                    z0              uniform $z0;
                    zGround         uniform 0.0;
                    Cmu             $Cmu;
                    kappa           $kappa;
                    value           uniform $k0;
                }
                */

                value           uniform $k0;
            }
        }
    }

    kappat
    {
        boundaryField
        {
            lower
            {
                /* Not sure if wall function should be used since qwall is used
                // This boundary condition provides a kinematic turbulent thermal conductivity
                // for using wall functions, using the Jayatilleke 'P' function.
                type            alphatJayatillekeWallFunction;
                Prt             $Prt;
                Cmu             $Cmu;
                kappat          $kappa;
                E               $E;
                */

                type            fixedValue;
                value           uniform 0.0;
            }
            upper
            {
                type            fixedValue;
                value           uniform 0.0;
            }
            west
            {
                type            calculated;
                value           uniform 0.0;  // Placeholder
            }
            east
            {
                type            calculated;
                value           uniform 0.0;
            }
            north
            {
                type            calculated;
                value           uniform 0.0;
            }
            south
            {
                type            calculated;
                value           uniform 0.0;
            }
        }
    }

    nut
    {
        boundaryField
        {
            lower
            {
                // 0 since it's taken care of by Rwall
                type                fixedValue;

                /*
                // nutkAtmRoughWallFunction might be better
                // although it should to be used with the atmBoundaryLayerInletVelocity boundary condition
                type            nutkRoughWallFunction;
                Ks              uniform $Ks;  // min(30z0, 0.5delta)
                Cs              uniform $Cs;  // Cs = E/Ks*z0 with E = 9.73
                */

                value           uniform 0;
            }
            upper
            {
                // Maybe slip?
                type            fixedValue;
                value           uniform 0.0;
            }
            south
            {
                type            calculated;  // zeroGradient;
                value           uniform 0.0;  // Placeholder
            }
            north
            {
                type            calculated;  // zeroGradient;
                value           uniform 0.0;
            }
            west
            {
                type            calculated;  // zeroGradient;
                value           uniform 0.0;
            }
            east
            {
                type            calculated;  // zeroGradient;
                value           uniform 0.0;
            }
        }
    }

    p_rgh
    {
        boundaryField
        {
            south
            {
                type            fixedFluxPressure;
            }
            north
            {
                // If reverse flow, use inlet value, otherwise, use zeroGradient
                type            zeroGradient;  // inletOutlet;
                // inletValue      uniform $p_rgh0;
                value           uniform $p_rgh0;
            }
            west
            {
                type            fixedFluxPressure;
            }
            east
            {
                type            zeroGradient;  // inletOutlet;
                // inletValue      uniform $p_rgh0;
                value           uniform $p_rgh0;
            }
        }
    }

    qwall
    {
        boundaryField
        {
            south
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            north
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            west
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
            east
            {
                type            fixedValue;
                value           uniform (0 0 0);
            }
        }
    }

    Rwall
    {
        boundaryField
        {
            // Only lower is non-zero
            lower
            {
                type            SchumannGrotzbach;
                kappa           $kappa;
                z0              uniform $z0;
                betaM           $betaM;
                gammaM          $gammaM;
                averageType     "local";
                //averageType     "planarAverage";
                value           uniform $Rwall;
            }
            south
            {
                type            fixedValue;
                value           uniform (0 0 0 0 0 0);
            }
            north
            {
                type            fixedValue;
                value           uniform (0 0 0 0 0 0);
            }
            west
            {
                type            fixedValue;
                value           uniform (0 0 0 0 0 0);
            }
            east
            {
                type            fixedValue;
                value           uniform (0 0 0 0 0 0);
            }
        }
    }

    epsilon
    {
        boundaryField
        {
            lower
            {
                type            epsilonWallFunction;
                Cmu             $Cmu;
                kappa           $kappa;
                value           uniform 1e-12;  // Not sure if this is used
            }
            upper
            {
                type            zeroGradient;

                /*
                // If reverse flow, use inflow BC profile, otherwise, use zeroGradient
                type            freeStream;
                freeStreamValue uniform $epsilon0;
                */

                /* Since atmBoundaryLayerInletEpsilon tend to overpredict epsilon by 10 times, not using it
                type            freeStream;
                freeStreamBC
                {
                    type            atmBoundaryLayerInletEpsilon;
                    flowDir         (0.8660254037844 0.5 0);
                    zDir            (0 0 1);
                    Cmu             $Cmu;
                    kappa           $kappa;
                    Uref            $U0Mag;
                    Zref            $windHeight;
                    z0              uniform $z0;
                    zGround         uniform 0.0;
                    value           uniform $epsilon0;
                }
                */

                value           uniform $epsilon0;
            }
            east
            {
                // Since inletValue of k is 0, epsilon is ~0 (avoid FPE) too
                type            inletOutlet;
                inletValue      uniform 1e-12;

                /*
                type            freeStream;
                freeStreamValue uniform 1e-12;
                */

                value           uniform $epsilon0;
            }
            west
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;

                /*
                type            atmBoundaryLayerInletEpsilon;
                flowDir         (0.8660254037844 0.5 0);
                zDir            (0 0 1);
                Cmu             $Cmu;
                kappa           $kappa;
                Uref            $U0Mag;
                Zref            $windHeight;
                z0              uniform $z0;
                zGround         uniform 0.0;
                */

                value           uniform $epsilon0;
            }
            south
            {
                type            timeVaryingMappedFixedValue;
                setAverage      0;
                perturb         0.0;
                offset          0;
                mapMethod       planarInterpolation;

                /*
                type            atmBoundaryLayerInletEpsilon;
                flowDir         (0.8660254037844 0.5 0);
                zDir            (0 0 1);
                Cmu             $Cmu;
                kappa           $kappa;
                Uref            $U0Mag;
                Zref            $windHeight;
                z0              uniform $z0;
                zGround         uniform 0.0;
                */

                value           uniform $epsilon0;
            }
            north
            {
                type            inletOutlet;
                inletValue      uniform 1e-12;

                /*
                type            freeStream;
                freeStreamValue uniform 1e-12;
                */

                value           uniform $epsilon0;
            }
        }
    }
}
// ************************************************************************* //
